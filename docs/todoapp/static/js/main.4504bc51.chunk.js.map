{"version":3,"sources":["app/TodoListItem.ts","app/TodoList.ts","app/TodoApp.ts","app/TextInput.ts","app/Models.ts","app/TodoListItemView.tsx","app/TextInputView.tsx","app/TodoListView.tsx","app/TodoAppView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoListItem","R","TodoList","name","createdAt","Date","toISOString","todoListId","complete","this","TodoListItemEntities","sort","dependent","TodoApp","todoAppId","itemCount","value","item","addEntity","items","push","byComplete","id","true","false","removeEntity","length","listSortOrder","todoList","todoLists","val","todoListsByName","todoListsByItemCount","todoListsByCreatedAt","TextInput","onValue","models","entities","todo","listener","e","console","log","ReactReknow","useQuery","useComponentEntity","TodoListItemView","params","IncompleteItemView","onClick","setComplete","CompleteItemView","style","textDecorationLine","TextInputView","caption","textInput","type","onChange","setValue","target","disabled","isEmpty","notifyValue","TodoListView","incompleteItems","completeItems","remove","map","v","addItem","TodoAppView","todoApp","lists","sortedTodoLists","addList","setListSortOrder","l","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4504bc51.chunk.js","sourcesContent":["import * as R from \"reknow\"\nimport {TodoList} from \"./TodoList\"\n\nexport class TodoListItem extends R.Entity {\n  @R.id id!: string\n  todoListId!: string\n  @R.belongsTo(() => TodoList, \"todoListId\") todoList!: TodoList\n\n  complete = false\n\n  constructor(public name: string, public createdAt = new Date().toISOString()) {\n    super()\n  }\n\n  @R.action setComplete() {\n    this.complete = true\n  }\n}\n\nclass Entities extends R.Entities<TodoListItem> {\n  @R.index(\"=todoListId\", \"=complete\", \"+createdAt\") byComplete!: R.HashIndex<\n    R.HashIndex<R.SortIndex<TodoListItem>>\n  >\n}\n\nexport const TodoListItemEntities = new Entities(TodoListItem)\n","import * as R from \"reknow\"\nimport {TodoListItem, TodoListItemEntities} from \"./TodoListItem\"\nimport {TodoApp} from \"./TodoApp\"\n\nexport class TodoList extends R.Entity {\n  @R.id id!: string\n  todoAppId!: string\n\n  @R.hasMany(() => TodoListItem, \"todoListId\", {\n    sort: \"+createdAt\",\n    dependent: \"remove\",\n  })\n  items!: Array<TodoListItem>\n  itemCount = 0\n\n  @R.belongsTo(() => TodoApp, \"todoAppId\") todoApp!: TodoApp\n\n  constructor(public name: string) {\n    super()\n  }\n\n  @R.action addItem(value: string) {\n    const item = new TodoListItem(value).addEntity()\n    this.items.push(item)\n  }\n\n  @R.query get completeItems() {\n    return TodoListItemEntities.byComplete[this.id]?.true || []\n  }\n\n  @R.query get incompleteItems() {\n    return TodoListItemEntities.byComplete[this.id]?.false || []\n  }\n\n  @R.action remove() {\n    this.removeEntity()\n  }\n\n  @R.reaction computeItemCount() {\n    this.itemCount = this.items.length\n  }\n}\n\nclass Entities extends R.Entities<TodoList> {}\n\nnew Entities(TodoList)\n","import * as R from \"reknow\"\nimport {TodoList} from \"./TodoList\"\n\nexport type ListSortOrder = \"byCreatedAt\" | \"byName\" | \"byItemCount\"\n\nexport class TodoApp extends R.Entity {\n  @R.id id!: string\n\n  @R.hasMany(() => TodoList, \"todoAppId\", {dependent: \"remove\"})\n  todoLists!: Array<TodoList>\n\n  @R.hasMany(() => TodoList, \"todoAppId\", {sort: \"+name\"})\n  todoListsByName!: Array<TodoList>\n\n  @R.hasMany(() => TodoList, \"todoAppId\", {sort: \"+createdAt\"})\n  todoListsByCreatedAt!: Array<TodoList>\n\n  @R.hasMany(() => TodoList, \"todoAppId\", {sort: \"-itemCount\"})\n  todoListsByItemCount!: Array<TodoList>\n\n  listSortOrder: ListSortOrder = \"byCreatedAt\"\n\n  @R.action addList(value: string) {\n    const todoList = new TodoList(value).addEntity()\n    this.todoLists.push(todoList)\n  }\n\n  @R.action setListSortOrder(val: ListSortOrder) {\n    this.listSortOrder = val\n  }\n\n  @R.query get sortedTodoLists() {\n    switch (this.listSortOrder) {\n      case \"byName\":\n        return this.todoListsByName\n      case \"byItemCount\":\n        return this.todoListsByItemCount\n      default:\n        return this.todoListsByCreatedAt\n    }\n  }\n}\n\nclass Entities extends R.Entities<TodoApp> {}\n\nnew Entities(TodoApp)\n","import * as R from \"reknow\"\n\nexport class TextInput extends R.Entity {\n  constructor(public value: string = \"\", public onValue: (v: string) => void) {\n    super()\n  }\n\n  @R.query get isEmpty() {\n    return this.value === \"\"\n  }\n\n  @R.action setValue(value: string) {\n    this.value = value\n  }\n\n  @R.action notifyValue() {\n    this.onValue(this.value)\n    this.value = \"\"\n  }\n}\n\nclass Entities extends R.Entities<TextInput> {}\n\nnew Entities(TextInput)\n","import * as R from \"reknow\"\nimport {ReactReknow} from \"react-reknow\"\nimport {TodoApp} from \"./TodoApp\"\nimport {TodoList} from \"./TodoList\"\nimport {TodoListItem} from \"./TodoListItem\"\nimport {TextInput} from \"./TextInput\"\n\nexport const models = new R.StateManager({\n  entities: {\n    todo: {\n      TodoApp,\n      TodoList,\n      TodoListItem,\n      TextInput,\n    },\n  },\n  listener: (e) => console.log(R.stringifyTransaction(e)),\n  // Uncomment to see information about queries, subscriptions, and invalidations\n  //debugListener: e=>console.log(R.stringifyDebugEvent(e)),\n})\n\nexport const {useQuery, useComponentEntity} = ReactReknow(models)\n","import React from \"react\"\nimport {useQuery} from \"./Models\"\nimport {TodoListItem} from \"./TodoListItem\"\n\nexport const TodoListItemView: React.FC<{item: TodoListItem}> = (params) => {\n  const item = useQuery(() => params.item)\n\n  return (\n    <>\n      {item.complete ? (\n        <CompleteItemView item={item} />\n      ) : (\n        <IncompleteItemView item={item} />\n      )}\n    </>\n  )\n}\n\nconst IncompleteItemView: React.FC<{item: TodoListItem}> = (params) => {\n  const {item} = params\n  return (\n    <li>\n      <div>\n        {item.name}\n        <button onClick={() => item.setComplete()}>Done!</button>\n      </div>\n    </li>\n  )\n}\n\nconst CompleteItemView: React.FC<{item: TodoListItem}> = (params) => {\n  const {item} = params\n  return (\n    <li>\n      <div style={{textDecorationLine: \"line-through\"}}>{item.name}</div>\n    </li>\n  )\n}\n","import React from \"react\"\nimport {useComponentEntity} from \"./Models\"\nimport {TextInput} from \"./TextInput\"\n\nexport const TextInputView: React.FC<{\n  onValue: (value: string) => void\n  caption: string\n}> = (params) => {\n  const {onValue, caption} = params\n  const textInput = useComponentEntity(() => new TextInput(\"\", onValue))\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={textInput.value}\n        onChange={(e) => textInput.setValue(e.target.value)}\n      />\n      <button\n        disabled={textInput.isEmpty}\n        onClick={() => textInput.notifyValue()}\n      >\n        {caption}\n      </button>\n    </>\n  )\n}\n","import React from \"react\"\nimport {useQuery} from \"./Models\"\nimport {TodoList} from \"./TodoList\"\nimport {TodoListItemView} from \"./TodoListItemView\"\nimport {TextInputView} from \"./TextInputView\"\n\nexport const TodoListView: React.FC<{todoList: TodoList}> = (params) => {\n  const todoList = useQuery(() => params.todoList)\n  const incompleteItems = useQuery(() => todoList.incompleteItems)\n  const completeItems = useQuery(() => todoList.completeItems)\n\n  return (\n    <li>\n      <div>\n        List {todoList.name}\n        <button onClick={() => todoList.remove()}>Remove</button>\n      </div>\n      <ul>\n        {incompleteItems.map((item) => (\n          <TodoListItemView item={item} key={item.id} />\n        ))}\n        {completeItems.map((item) => (\n          <TodoListItemView item={item} key={item.id} />\n        ))}\n        Add new todo:\n        <TextInputView\n          caption=\"Add Item\"\n          onValue={(v) => todoList.addItem(v)}\n        />\n      </ul>\n    </li>\n  )\n}\n","import React from \"react\"\nimport {useQuery} from \"./Models\"\nimport {useComponentEntity} from \"./Models\"\nimport {TodoApp} from \"./TodoApp\"\nimport {TodoListView} from \"./TodoListView\"\nimport {TextInputView} from \"./TextInputView\"\n\nexport const TodoAppView: React.FC<{}> = (params) => {\n  const todoApp = useComponentEntity(() => new TodoApp())\n  const lists = useQuery(() => todoApp.sortedTodoLists)\n\n  return (\n    <>\n      <div>Todo App</div>\n      <div>\n        Add a new Todo list:\n        <TextInputView caption=\"Add List\" onValue={(v) => todoApp.addList(v)} />\n        <div>\n          Lists\n          <button\n            onClick={() => todoApp.setListSortOrder(\"byCreatedAt\")}\n            disabled={todoApp.listSortOrder === \"byCreatedAt\"}\n          >\n            Sort By Created At\n          </button>\n          <button\n            onClick={() => todoApp.setListSortOrder(\"byName\")}\n            disabled={todoApp.listSortOrder === \"byName\"}\n          >\n            Sort By Name\n          </button>\n          <button\n            onClick={() => todoApp.setListSortOrder(\"byItemCount\")}\n            disabled={todoApp.listSortOrder === \"byItemCount\"}\n          >\n            Sort By Item Count\n          </button>\n        </div>\n        <ul>\n          {lists.map((l) => (\n            <TodoListView key={l.id} todoList={l} />\n          ))}\n        </ul>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport {TodoAppView} from \"./app/TodoAppView\"\n\nfunction App() {\n  return (\n      <TodoAppView />\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}